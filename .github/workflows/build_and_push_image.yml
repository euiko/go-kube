
name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: go-kube
  CONFIG_REPO: gophercode/cloud-native
  CONFIG_DIR: deployments/overlays/staging/go-kube

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi
  # Push image to GitHub Package Registry.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Log into registry
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USER }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=${{ secrets.DOCKERHUB_USER }}/$IMAGE_NAME
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          echo "${IMAGE_ID}:${VERSION}" > image_version
      - name: Upload image_version for update config repo
        uses: actions/upload-artifact@v1
        with:
          name: image_version
          path: image_version
  # Push image to GitHub Package Registry.
  # See also https://docs.docker.com/docker-hub/builds/
  update:
    # Ensure push job passes before pushing image.
    needs: push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1.2.0
        with:
          kustomize-version: "3.5.4"
      - name: Checkout config repository
        uses: actions/checkout@v2
        with:
          repository: "${{ env.CONFIG_REPO }}"
          token: "${{ secrets.CONFIG_GITHUB_TOKEN }}"
      - name: Get image_version from previous step
        uses: actions/download-artifact@v1
        with:
          name: image_version
          path: image_version
      - name: 'Kustomize update image tag'
        run: |
          IMAGE_VERSION=$(cat image_version)
          echo "Update image version to ${IMAGE_VERSION}"
          rm image_version
          cd $CONFIG_DIR
          git config --local user.email "ci@github.com"
          git config --local user.name "Github CI"
          kustomize edit set image $IMAGE_VERSION
          git commit -m "Update image version to ${IMAGE_VERSION}" -a
      - name: Push changes
        uses: ad-m/github-push-action@v0.5.0
        with:
          github_token: ${{ secrets.CONFIG_GITHUB_TOKEN }}